PX2 - a backbone replacement
--------------------------------

PX2 is a backbone replacement with a more consistent design:

   - objects are both objects and containers, of type Class

   - containers can be specialized so they only contain a specific
     type of object

   - all derived Classes have named getters and setters

   - views are of type Class
   
   - objects that 'contain' (either by using 'set' or 'add' methods)
     other objects are passed messages from the objects they contain

Installation
------------

    npm install px2

Class methods
-------------

     this.create(name, value):

       Creates a new member variable called 'name' with initial value
       of 'value'. Also creates named getters/setters, this.name() and
       this.name(value).

       this.set(name, value)
       this.get(name)

       Standard getter/setters for Class objects.

     this.add(value)

       Add value to the collection, sends "add" and "change" messages
       
     this.remove(value)

       Remove value from the collectionsends "remove" and "change"
       messages

     this.at(index)

       Return the added element located at index.

     this.length:

        The number of elements contained in the object.

     this.clear()

       Remove all items from the collection, sends "change" message

     this.each(function (value) ...)

       Side effects only iteration over elements

     this.map(function (value) ...)

       Returns an array of returned values

     this.find(object || function (value) ...)

       Find a specific object in the collection.  If the argument is
       an object, === is used, if a function it is called with each
       element of the collection until it returns true, after which
       that object is returned.

Example of defining and using a Class as an object and a container
------------------------------------------------------------------

    var Class = require("px2").Class;
    
    // Declare object class data
    var Point = {
        // Optional, but good for debugging and containers
        type: 'Point'
    
        // Constructor, called during instatiation
        init: function (x, y) {
            this.create('x', x);
            this.create('y', y);
        }
    
        // A random method
        toString: function () {
            return "x: " + x + ", y: " + y;
        }
    }
    
    // Delcare a container
    var Points = {
        type: 'Points',
    
        // This container contatins type...
        contains: 'Point'
    
        init: function () {
            this.create('currentPoint'); // undefined initially
    
            this.on('add', function (e) {
                // Use a named setter to set the current value of member 'currentPoint'.
                // e is passed to all trigger functions and it contains:
                //          e.value: the value that was added/removed/updated/etc
                //          e.target: the object that was updated, in this case it would be 'this'
                this.currentPoint(e.value);
            });
            this.on('remove', function (e) {
                if(e.value === this.currentPoint()) {
                    this.currenPoint(undefined);
                }
            });
        }
    }
    
    // Instantiate a MyObject
    var points = new Class(Points);
    
    points.add(new Class(Point, 100, 200));
    
    var point = points.at(0);
    
    var xs = point.map(function (point) {
        return point.x();
    }); // => [100]
    
Views
-----

Views are derived Class and contain all features and methods that
Class(es) give.

View example
------------

    var View = require("px2").View;
    
    var PointsView = {
        // optional, but handy for debugging and is the default class if
        // className is not defined (below)
        type: 'PointsView',
    
        // optional, sets default tag name of this.$el, else is "div"
        tagName: "span",  
    
        // optional, sets default class of this.$el, else is the value of 'type'
        className: "",
    
        // optional name for this.model, in this case, you could use
        // this.myModel to reference your model
        model: 'points',
    
        // events, just like backbone
        events: {
            'click': function (e) {
                     alert('Hello world'); // this is bound for you automagically
            }
        }
    
        // constructor is passed the model as the first argument (not
        // optional), and any other arguments passed after that
        init: function (model, value) {
              this.create('value', value);
              this.points.on('add', this.render); // this is bound automagically
        }
    
        // render, if you don't provide it a default is given that just returns this.$el
        render: {
                return this.$el.html(this.points.map(function (v) {
                    return $('<div>').text(v.toString());
                }));
        }
    }
    var points = new Class(Points);

    // A view constructor is similar to a Class constructor, but the second argument
    // to the call to new View is the Class (model) for the View.
    var pointsView = new View(MyView, points, 1);
    $('document').ready(function () {
        $('body').html(pointsView.render());
    });


WTF is this written in?
-----------------------

PX2 is written in Parenscript: https://github.com/vsedach/Parenscript
To build from source you need use ps2js: https://github.com/burtonsamograd/ps2js

--
Burton Samograd <burton.samograd@gmail.com>
2015