;; -*- mode: lisp -*-
(load "test-macros.ps")
(code-coverage "/px2\\//")

;; Magic to use jQuery in node
(setf $ ((require "jquery") (chain ((@ (require "jsdom") jsdom)) default-view)))

(defvar expect (@ (require "chai") expect))
(defvar sinon (require "sinon"))
(defvar *Class (@ (require "../px2.js") *Class))
(defvar *View (@ (require "../px2.js") *View))

(defsuite "Class"
    ((require "./methods.js") *Class)
    ((require "./constructor.js") *Class)
    ((require "./members.js") *Class)
    ((require "./defaults.js") *Class)
    ((require "./collections.js") *Class)
    ((require "./events.js") *Class)
    ((require "./parents.js") *Class)
    ((require "./bubbling.js") *Class)
    ((require "./iterators.js") *Class)
    ((require "./copy.js") *Class))
  
(defsuite "View"
    ((require "./methods.js") *View)
    ((require "./constructor.js") *View)
    ((require "./members.js") *View)
    ((require "./defaults.js") *View)
    ((require "./collections.js") *View)
    ((require "./events.js") *View)
    ((require "./parents.js") *View)
    ((require "./bubbling.js") *View)
    ((require "./iterators.js") *View)
    ((require "./copy.js") *View)
  
    (defsuite "view"
        (deftest "should have a $el member"
            (let ((view (new (*View))))
              (assert (@ view $el) "$el memeber is not present in view")
              (done)))

        (deftest "should have a $el member of type div"
            (let ((view (new (*View))))
              (assert-equals  ((@ view $el prop) "tagName") "DIV"
                              "$el memeber is not a DIV")
              (done)))

        (deftest "should have a $el member of type span"
            (let ((view (new (*View (create "tagName" "SPAN")))))
              (assert-equals  ((@ view $el prop) "tagName") "SPAN"
                              "$el memeber is not a SPAN")
              (done)))
        
        (deftest "should have a $el member of class type 'testing'"
            (let ((view (new (*View (create "className" "testing")))))
              (assert-equals  ((@ view $el prop) "class") "testing"
                              "$el class name is not 'testing'")
              (done)))

        (deftest "should set the model member"
            (let ((view (new (*View (create) 1))))
              (assert-equals  (@ view model) 1
                              "view.model is not set to 1")
              (done)))

        (deftest "should set the model name"
            (let ((view (new (*View (create model "name") 1))))
              (assert-equals  (@ view name) 1
                              "view.name is not set to 1")
              (done)))

        (deftest "should set the css/style member"
            (let ((view (new (*View (create style (create "font-weight" "bold"))))))
              (assert-equals  ((@ view $el css) "font-weight") "bold"
                              "$el css 'font-weight' is not set to 'bold")
              (done)))

        (deftest "should set events"
            (let* ((handler ((@ sinon spy) (lambda ())))
                   (view (new (*View (create events (create "click" handler))))))
              ((@ view $el click))
              (assert (@ handler called-once) "event handler was not called.")
              (done)))

        (deftest "should set default render function if none given"
            (let ((view (new (*View (create events (create))))))
              (assert (@ view render) "default render function was not created.")
              (assert ((@ view render)) "default render function did not return a value.")
              (done)))

        (deftest "should only augment the render function once"
            (let* ((options (create render (lambda () this.$el)))
                   (view1 (new (*View options)))
                   (view2 (new (*View options))))
              (assert (@ options render-augmented) "render function was augmented.")
              (assert ((@ view1 render)) "render1 function did not return a value.")
              (assert ((@ view2 render)) "render2 function did not return a value.")
              (done)))
      ))



