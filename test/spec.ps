;; -*- mode: lisp -*-
(load "test-macros.ps")
(code-coverage "/px2\\//")

;; Magic to use jQuery in node
(setf $ ((require "jquery") (chain ((@ (require "jsdom") jsdom)) default-view)))

(defvar expect (@ (require "chai") expect))
(defvar sinon (require "sinon"))
(defvar *Model (@ (require "../px2.js") *Model))
(defvar *View (@ (require "../px2.js") *View))

(defsuite "Class"
    ((require "./methods.js") *Model)
    ((require "./constructor.js") *Model)
    ((require "./members.js") *Model)
    ((require "./defaults.js") *Model)
    ((require "./collections.js") *Model)
    ((require "./events.js") *Model)
    ((require "./parents.js") *Model)
    ((require "./bubbling.js") *Model)
    ((require "./iterators.js") *Model)
    ((require "./copy.js") *Model)
    ((require "./serialize.js") *Model)
  )
  
(defsuite "View"
    ((require "./methods.js") *View)
    ((require "./constructor.js") *View)
    ((require "./members.js") *View)
    ((require "./defaults.js") *View)
    ((require "./collections.js") *View)
    ((require "./events.js") *View)
    ((require "./parents.js") *View)
    ((require "./bubbling.js") *View)
    ((require "./iterators.js") *View)
    ((require "./copy.js") *View)
    ((require "./serialize.js") *View)

    (defsuite "view"
        (deftest "should have a $el member"
            (let* ((cls (new (*View)))
                   (view (new (cls))))
              (assert (@ view $el) "$el memeber is not present in view")
              (done)))

        (deftest "should have a $el member of type div"
            (let* ((cls (new (*View)))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "tagName") "DIV"
                              "$el memeber is not a DIV")
              (done)))

        (deftest "should have a $el member of type span"
            (let* ((cls (new (*View (create "tagName" "SPAN"))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "tagName") "SPAN"
                              "$el memeber is not a SPAN")
              (done)))
        
        (deftest "should have a $el member of class type 'testing'"
            (let* ((cls (new (*View (create "className" "testing"))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "class") "testing"
                              "$el class name is not 'testing'")
              (done)))

        (deftest "should automatically set the class name to type if className is not provided"
            (let* ((cls (new (*View (create "type" "testing"))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "class") "testing"
                              "automatic class name is not 'testing'")
              (done)))

        (deftest "should automatically set the class name to className if it is provided"
            (let* ((cls (new (*View (create "className" "testing"))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "class") "testing"
                              "automatic class name is not 'testing'")
              (done)))

        (deftest "should automatically set the class name when className is provided"
            (let* ((cls (new (*View (create "type" "testing"
                                            "className" "testing2"))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "class") "testing2"
                              "automatic class name is not 'testing2'")
              (done)))

        (deftest "should automatically append to className to type as the class name when className starts with a space"
            (let* ((cls (new (*View (create "type" "testing"
                                            "className" " testing2"))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el prop) "class") "testing testing2"
                              "automatic class name is not 'testing testing2'")
              (done)))

        (deftest "should set the model member"
            (let* ((cls (new (*View)))
                   (view (new (cls 1))))
              (assert-equals  (@ view model) 1
                              "view.model is not set to 1")
              (done)))

        (deftest "should set the model name"
            (let* ((cls (new (*View (create model "name"))))
                   (view (new (cls 1))))
              (assert-equals  (@ view name) 1
                              "view.name is not set to 1")
              (done)))

        (deftest "should set the css/style member"
            (let* ((cls (new (*View (create style (create "font-weight" "bold")))))
                   (view (new (cls))))
              (assert-equals  ((@ view $el css) "font-weight") "bold"
                              "$el css 'font-weight' is not set to 'bold")
              (done)))

        (deftest "should set events"
            (let* ((handler ((@ sinon spy) (lambda ())))
                   (cls (*View (create events (create "click" handler))))
                   (view (new (cls))))
              ((@ view $el click))
              (assert (@ handler called-once) "event handler was not called.")
              (done)))

        (deftest "should set default render function if none given"
            (let* ((cls (new (*View (create events (create)))))
                   (view (new (cls))))
              (assert (@ view render) "default render function was not created.")
              (assert ((@ view render)) "default render function did not return a value.")
              (done)))

        (deftest "should only augment the render function once"
            (let* ((options (create render (lambda () this.$el)))
                   (cls (*View options))
                   (view1 (new (cls)))
                   (view2 (new (cls))))
              (assert (@ options render-augmented) "render function was augmented.")
              (assert ((@ view1 render)) "render1 function did not return a value.")
              (assert ((@ view2 render)) "render2 function did not return a value.")
              (done)))

        (deftest "automatically call the render function on construction"
            (let* ((render ((@ sinon spy) (lambda () )))
                   (cls (*View (create render render)))
                   (view (new (cls))))
              (assert (@ render called-once) "render was not called during init.")
              (done)))
      ))



